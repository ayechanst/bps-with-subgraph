// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class GameDone extends ethereum.Event {
  get params(): GameDone__Params {
    return new GameDone__Params(this);
  }
}

export class GameDone__Params {
  _event: GameDone;

  constructor(event: GameDone) {
    this._event = event;
  }

  get winnerEmitted(): string {
    return this._event.parameters[0].value.toString();
  }

  get playerOneChoice(): string {
    return this._event.parameters[1].value.toString();
  }

  get playerTwoChoice(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class YourContract extends ethereum.SmartContract {
  static bind(address: Address): YourContract {
    return new YourContract("YourContract", address);
  }

  playerOneChoice(): string {
    let result = super.call(
      "playerOneChoice",
      "playerOneChoice():(string)",
      []
    );

    return result[0].toString();
  }

  try_playerOneChoice(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "playerOneChoice",
      "playerOneChoice():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  playerTwoChoice(): string {
    let result = super.call(
      "playerTwoChoice",
      "playerTwoChoice():(string)",
      []
    );

    return result[0].toString();
  }

  try_playerTwoChoice(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "playerTwoChoice",
      "playerTwoChoice():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  winner(): string {
    let result = super.call("winner", "winner():(string)", []);

    return result[0].toString();
  }

  try_winner(): ethereum.CallResult<string> {
    let result = super.tryCall("winner", "winner():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class InputCall extends ethereum.Call {
  get inputs(): InputCall__Inputs {
    return new InputCall__Inputs(this);
  }

  get outputs(): InputCall__Outputs {
    return new InputCall__Outputs(this);
  }
}

export class InputCall__Inputs {
  _call: InputCall;

  constructor(call: InputCall) {
    this._call = call;
  }

  get choice(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class InputCall__Outputs {
  _call: InputCall;

  constructor(call: InputCall) {
    this._call = call;
  }
}

export class PlayGameCall extends ethereum.Call {
  get inputs(): PlayGameCall__Inputs {
    return new PlayGameCall__Inputs(this);
  }

  get outputs(): PlayGameCall__Outputs {
    return new PlayGameCall__Outputs(this);
  }
}

export class PlayGameCall__Inputs {
  _call: PlayGameCall;

  constructor(call: PlayGameCall) {
    this._call = call;
  }
}

export class PlayGameCall__Outputs {
  _call: PlayGameCall;

  constructor(call: PlayGameCall) {
    this._call = call;
  }
}
